module nl.stgm.ql.parser.rats.QLParser;
import nl.stgm.ql.parser.rats.QLExpr;
import nl.stgm.ql.parser.rats.QLLexical;

header {
import java.util.List;
import java.util.ArrayList;
import xtc.util.Action;
import nl.stgm.ql.ast.*;
import nl.stgm.ql.ast.expr.*;
import nl.stgm.ql.ast.expr.unary.*;
import nl.stgm.ql.ast.expr.binary.*;
import nl.stgm.ql.ast.expr.literal.*;
import nl.stgm.ql.ast.form.*;
}

// these are the possible starting points for parsing;
// Expr and Form are mainly exported for testing purposes
public Expr ParseExpr = yyValue:Expr;
public Form ParseForm = yyValue:Form;
public Document Parse = yyValue:Document;

Document Document = Spacing
	forms:Form*
	{ yyValue = new Document(forms.list()); };

Form Form =
	"form" Spacing id:Ident Spacing '{' Spacing items:FormItem* '}' Spacing
	{ yyValue = new Form(id, items.list()); };

FormItem FormItem =
	Question / Conditional;

Question Question =
	CalcQuestion /
	id:Ident ':' Spacing question:StringLit Spacing type:Ident Spacing
	{ yyValue = new Question(id, question, type); };

CalcQuestion CalcQuestion =
	id:Ident ':' Spacing question:StringLit Spacing type:Ident Spacing '(' Spacing calculation:Expr ')' Spacing
	{ yyValue = new CalcQuestion(id, question, type, calculation); };

Conditional Conditional =
	"if" Spacing '(' Spacing condition:Expr ')' Spacing '{' Spacing ifQuestions:Question* '}' Spacing
	"else" Spacing '{' Spacing elseQuestions:Question* '}' Spacing
	{ yyValue = new Conditional(condition, ifQuestions.list(), elseQuestions.list()); }
	/
	"if" Spacing '(' Spacing condition:Expr ')' Spacing '{' Spacing ifQuestions:Question* '}' Spacing
	{ yyValue = new Conditional(condition, ifQuestions.list()); }
	;
